//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Scripts/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Controles"",
            ""id"": ""ff1f3b6d-800d-46cb-bdaa-06b9e377bf94"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""9476daf6-2853-471f-90a3-7c751fad4de8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Verical"",
                    ""type"": ""Button"",
                    ""id"": ""ea66179b-1ea4-4cb6-8b2d-a705bc109e93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2b90b521-6f25-4599-896b-ab93fe80a502"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""89fed494-6a9c-4ff8-9828-483f65effb2b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b9bcb895-77f8-4c76-a10d-145409d25cd7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""44096eeb-97e6-49c9-8636-ea7996cafaec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ad53c2e1-ed92-413c-b536-7ab04ad66023"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4981d935-2e26-42e4-9096-f8b3a4d8e693"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Verical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f978d94e-05e8-46e2-a4a7-c9ed323f7b38"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Verical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controles
        m_Controles = asset.FindActionMap("Controles", throwIfNotFound: true);
        m_Controles_Horizontal = m_Controles.FindAction("Horizontal", throwIfNotFound: true);
        m_Controles_Verical = m_Controles.FindAction("Verical", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controles
    private readonly InputActionMap m_Controles;
    private List<IControlesActions> m_ControlesActionsCallbackInterfaces = new List<IControlesActions>();
    private readonly InputAction m_Controles_Horizontal;
    private readonly InputAction m_Controles_Verical;
    public struct ControlesActions
    {
        private @InputSystem m_Wrapper;
        public ControlesActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_Controles_Horizontal;
        public InputAction @Verical => m_Wrapper.m_Controles_Verical;
        public InputActionMap Get() { return m_Wrapper.m_Controles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlesActions set) { return set.Get(); }
        public void AddCallbacks(IControlesActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlesActionsCallbackInterfaces.Add(instance);
            @Horizontal.started += instance.OnHorizontal;
            @Horizontal.performed += instance.OnHorizontal;
            @Horizontal.canceled += instance.OnHorizontal;
            @Verical.started += instance.OnVerical;
            @Verical.performed += instance.OnVerical;
            @Verical.canceled += instance.OnVerical;
        }

        private void UnregisterCallbacks(IControlesActions instance)
        {
            @Horizontal.started -= instance.OnHorizontal;
            @Horizontal.performed -= instance.OnHorizontal;
            @Horizontal.canceled -= instance.OnHorizontal;
            @Verical.started -= instance.OnVerical;
            @Verical.performed -= instance.OnVerical;
            @Verical.canceled -= instance.OnVerical;
        }

        public void RemoveCallbacks(IControlesActions instance)
        {
            if (m_Wrapper.m_ControlesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlesActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlesActions @Controles => new ControlesActions(this);
    public interface IControlesActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnVerical(InputAction.CallbackContext context);
    }
}
